{"mappings":"YAaA,SAAAA,EAAgBC,UACLA,EAAKC,wBAAwBC,IAAMC,OAAOC,QAIrD,SAAAC,EAAuBC,MACfC,gBAAgBF,EAAAA,IAChBE,KAAKD,UAAYA,GACZC,KAAKD,UAAAA,cAEHC,KAAKC,QAIpBH,EAAcI,UAAAA,CACVC,YAAaL,EAEbG,KAAM,eACEG,EAAIJ,KACRI,EAAEC,YAAa,EACfD,EAAEE,GAAKF,EAAEL,UAAUQ,cAAc,4BAEjCX,OAAOY,iBAAiB,SAAUJ,EAAEK,OAAOC,KAAKN,IAEhDA,EAAEK,UAGNA,OAAQ,eAxCgBE,EAAIC,EAAIC,EAAQC,EAAKC,EAGzCC,EAsCIZ,EAAIJ,KAERI,EAAEa,gBAAkBb,EAAEL,UAAUmB,aAChCd,EAAEe,WAAa3B,EAAOY,EAAEL,WAAaH,OAAOwB,YAC5ChB,EAAEiB,SAAW7B,EAAOY,EAAEL,WAAcK,EAAEa,gBAEtCb,EAAEkB,aA/CkBX,EA+CeP,EAAEe,WA/CbP,GA+C0B,GA/CtBC,EA+C2BT,EAAEiB,SA5CzDL,GA4CmE,GA7CzDJ,IADLC,EAAKF,GAIP,SAASY,OACRC,EAASR,GAAKO,EAAQZ,GAAMC,SACrB,MAAPE,GAAeU,EAASV,IAAKU,EAASV,GAC/B,MAAPC,GAAeS,EAAST,IAAKS,EAAST,GACnCS,IAwCPpB,EAAEqB,SAAWrB,EAAEE,GAAGY,aAClBd,EAAEsB,aAAetB,EAAEqB,SAAWrB,EAAEa,gBAEhCb,EAAEuB,SAAWvB,EAAEkB,YAAY1B,OAAOC,UAGtC+B,OAAQ,SAASD,OACTvB,EAAIJ,KAERI,EAAEuB,SAAWvB,EAAEkB,YAAY1B,OAAOC,aAE9BgC,EAAYzB,EAAEuB,UAAY,IAAMvB,EAAEuB,SAAW,GAC7CG,EAAkB1B,EAAEuB,WAAavB,EAAE2B,aAEnCF,GAAaC,GACb1B,EAAEC,YAAa,EACfD,EAAE4B,EAAI5B,EAAEsB,aAAetB,EAAEuB,SAAW,KAEpCvB,EAAEC,YAAa,EAGnBD,EAAE2B,aAAe3B,EAAEuB,UAGvBM,aAAc,WACFjC,KAENM,GAAG4B,MAAMC,UAAAA,kBAFHnC,KAEmCgC,WAInDI,kBAAoB,eACZC,EAAAA,GAEJC,SAASC,iBAAiB,yBAAyBC,SAAQ,SAASzC,GAChEsC,EAAgBI,KAAAA,IAAS3C,EAAcC,OAG3C,SAAA2C,IACIC,sBAAsBD,OAClBV,EAAIpC,OAAOC,QAEfwC,EAAgBG,SAAQ,SAASI,GAC7BA,EAAShB,OAAOI,GAEZY,EAASvC,YACTsC,uBAAsB,WAClBC,EAASX,qBAMzBS,IAGJ9C,OAAOY,iBAAiB,OAAQ4B","sources":["./inner-parallax/index.js"],"sourcesContent":["function createInterpolator(x1, y1, x2, y2, min, max) {\n    var dx = x2 - x1;\n    var dy = y2 - y1;\n    var d = dy / dx;\n\n    return function(param) {\n        var result = d * (param - x1) + y1;\n        if (min != null && result < min) result = min;\n        if (max != null && result > max) result = max;\n        return result;\n    }\n}\n\nfunction offset(elem) {\n    return elem.getBoundingClientRect().top + window.scrollY\n}\n\n\nfunction InnerParallax(container) {\n    if (this instanceof InnerParallax) {\n        this.container = container;\n        if (!this.container) return;\n\n        return this.init();\n    }\n}\n\nInnerParallax.prototype = {\n    constructor: InnerParallax,\n\n    init: function() {\n        var I = this;\n        I.needRedraw = true;\n        I.bg = I.container.querySelector('[data-inner-parallax-bg]');\n\n        window.addEventListener('resize', I.resize.bind(I));\n\n        I.resize();\n    },\n\n    resize: function() {\n        var I = this;\n\n        I.containerHeight = I.container.offsetHeight;\n        I.startPoint = offset(I.container) - window.innerHeight;\n        I.endPoint = offset(I.container)  + I.containerHeight;\n\n        I.getProgress = createInterpolator(I.startPoint, -0.5, I.endPoint, 0.5);\n\n        I.bgHeight = I.bg.offsetHeight;\n        I.parallaxDist = I.bgHeight - I.containerHeight;\n\n        I.progress = I.getProgress(window.scrollY);\n    },\n\n    update: function(progress) {\n        var I = this;\n\n        I.progress = I.getProgress(window.scrollY);\n\n        var isVisible = I.progress > -.5 && I.progress < .5;\n        var progressChanged = I.progress !== I.lastProgress;\n\n        if (isVisible && progressChanged) {\n            I.needRedraw = true;\n            I.y = I.parallaxDist * I.progress * 2.2;\n        } else {\n            I.needRedraw = false;\n        };\n\n        I.lastProgress = I.progress;\n    },\n\n    drawParallax: function() {\n        var I = this;\n\n        I.bg.style.transform = `translate3d(0, ${I.y}px, 0`;\n    }\n}\n\ninitInnerParallax = function() {\n    var innerParallaxes = [];\n\n    document.querySelectorAll('[data-inner-parallax]').forEach(function(container) {\n        innerParallaxes.push(new InnerParallax(container));\n    });\n\n    function loop() {\n        requestAnimationFrame(loop);\n        var y = window.scrollY;\n\n        innerParallaxes.forEach(function(parallax) {\n            parallax.update(y);\n\n            if (parallax.needRedraw) {\n                requestAnimationFrame(function() {\n                    parallax.drawParallax();\n                });\n            };\n        });\n    };\n\n    loop();\n};\n\nwindow.addEventListener('load', initInnerParallax);"],"names":["$7e66d3d7064eb108b05060401f877f34$var$offset","elem","getBoundingClientRect","top","window","scrollY","$7e66d3d7064eb108b05060401f877f34$var$InnerParallax","container","this","init","prototype","constructor","I","needRedraw","bg","querySelector","addEventListener","resize","bind","x1","y1","x2","min","max","d","containerHeight","offsetHeight","startPoint","innerHeight","endPoint","getProgress","param","result","bgHeight","parallaxDist","progress","update","isVisible","progressChanged","lastProgress","y","drawParallax","style","transform","initInnerParallax","innerParallaxes","document","querySelectorAll","forEach","push","loop","requestAnimationFrame","parallax"],"version":3,"file":"index.d59d3de0.js.map"}