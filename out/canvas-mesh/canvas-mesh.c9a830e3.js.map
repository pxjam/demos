{"version":3,"sources":["modules/getGradCoords.js","modules/drawRotatedRect2.js","index.js"],"names":["xDir","yDir","w","h","x0","x1","y0","y1","ctx","cx","cy","width","height","degrees","beginPath","theta","Math","PI","w2","h2","sin","cos","rotatePoint","pointX","pointY","points","moveTo","lineTo","closePath","canvas","document","querySelector","getContext","mouseX","mouseY","params","rotateCenterX","rotateCenterY","gradDirX","gradDirY","size","color1","color2","maxPower","minOpacity","perspective","mode","drawRect","time","performance","now","clearRect","gradientCoords","grd","createLinearGradient","join","addColorStop","strokeStyle","prevPoints","i","globalAlpha","perspectiveFactor","x","y","power","getMousePower","includes","stroke","requestAnimationFrame","distanceX","distanceY","distanceFixed","sqrt","E","window","addEventListener","e","clientX","offsetLeft","clientY","offsetTop"],"mappings":"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","file":"canvas-mesh.c9a830e3.js","sourceRoot":"..\\..\\canvas-mesh","sourcesContent":["export default function(xDir, yDir, w, h) {\n    let x0, x1, y0, y1\n\n    switch (xDir) {\n        case 'left':\n            x0 = w\n            x1 = 0\n            break\n        case 'center':\n            x0 = 0\n            x1 = 0\n            break\n        case 'right':\n            x0 = 0\n            x1 = w\n    }\n    switch (yDir) {\n        case 'top':\n            y0 = 0\n            y1 = h\n            break\n        case 'center':\n            y0 = 0\n            y1 = 0\n            break\n        case 'bottom':\n            y0 = h\n            y1 = 0\n    }\n\n    return [x0, y0, x1, y1]\n}","export default function(ctx, cx, cy, width, height, degrees) {\n    ctx.beginPath()\n\n    let theta = degrees * Math.PI / 180\n\n    let w2 = width / 2\n    let h2 = height / 2\n\n    let sin = Math.sin(theta)\n    let cos = Math.cos(theta)\n\n    function rotatePoint(pointX, pointY) {\n        return [\n            cos * (pointX - cx) - sin * (pointY - cy) + cx,\n            sin * (pointX - cx) + cos * (pointY - cy) + cy\n        ]\n    }\n\n    // ctx.moveTo(cx, cy)\n    // ctx.lineTo(cx + 2, cy + 2)\n\n    let points = [\n        rotatePoint(cx - w2, cy - h2),\n        rotatePoint(cx + w2, cy - h2),\n        rotatePoint(cx + w2, cy + h2),\n        rotatePoint(cx - w2, cy + h2)\n    ]\n\n    ctx.moveTo(...points[0])\n    ctx.lineTo(...points[1])\n    ctx.lineTo(...points[2])\n    ctx.lineTo(...points[3])\n    ctx.lineTo(...points[0])\n\n    ctx.closePath()\n\n    return points\n}","import getGradCoords from \"./modules/getGradCoords\"\nimport drawRotatedRect2 from \"./modules/drawRotatedRect2\"\n\nlet canvas = document.querySelector('[data-canvas]')\nlet ctx = canvas.getContext('2d')\n\nlet mouseX = 0\nlet mouseY = 0\n\nlet params = {\n    rotateCenterX: canvas.width * 0.5,\n    rotateCenterY: canvas.height * 0.4,\n    gradDirX: \"right\",\n    gradDirY: \"top\",\n    size: 350,\n    color1: [0, 251, 235],\n    color2: [186, 0, 250],\n    maxPower: 1.1,\n    minOpacity: 0.3,\n    perspective: 0.5\n}\n\nlet mode = 0\n\nlet drawRect = () => {\n    let size = params.size\n    let step = 20\n    let stepCount = 7\n    let time = performance.now() / 500\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n\n    let gradientCoords = getGradCoords(params.gradDirX, params.gradDirY, canvas.width, canvas.height)\n    let grd = ctx.createLinearGradient(...gradientCoords)\n    let color1 = `rgba(${params.color1.join(',')})`\n    let color2 = `rgba(${params.color2.join(',')})`\n    grd.addColorStop(0, color1)\n    grd.addColorStop(1, color2)\n\n    ctx.strokeStyle = grd\n\n    let prevPoints = null\n\n    for (let i = 0; i < stepCount; i++) {\n        let x0 = params.rotateCenterX + 40 * Math.cos((-time + i) / 6)\n        let y0 = params.rotateCenterY + 40 * Math.sin((-time + i) / 6)\n\n        // ctx.globalAlpha = params.minOpacity + i / stepCount * (1 - params.minOpacity)\n        ctx.globalAlpha = 1 - (1 - params.minOpacity) * i / stepCount\n        let perspectiveFactor = 1 - params.perspective * i / stepCount\n\n        let x = x0 + i * step\n        let y = y0 + i * step\n\n        let power = getMousePower(x, y)\n\n        let width = size * perspectiveFactor * (1 + params.maxPower * power)\n        let height = width\n\n        let points = drawRotatedRect2(ctx, x, y, width, height, time + i)\n\n        if (prevPoints && [1, 2].includes(mode)) {\n            for (let i = 0; i < 4; i++) {\n                ctx.moveTo(...prevPoints[i])\n                ctx.lineTo(...points[i])\n\n                //ctx.moveTo(prevPoints[i][0] - prevPoints[i][0], prevPoints[i][1] - prevPoints[i][1])\n                // ctx.moveTo(canvas.width, 0)\n                // ctx.lineTo(...prevPoints[i])\n            }\n        }\n\n        if (mode === 2) {\n            for (let i = 0; i < 4; i++) {\n                ctx.moveTo(0, 0)\n                ctx.lineTo(...points[i])\n            }\n        }\n\n        prevPoints = points\n\n        ctx.stroke()\n    }\n\n    requestAnimationFrame(drawRect)\n}\n\ndrawRect()\n\nfunction getMousePower(x, y) {\n    let power\n    let distanceX = x - mouseX\n    let distanceY = y - mouseY\n    let distance = Math.sqrt(distanceX ** 2 + distanceY ** 2)\n    let distanceFixed = distance / params.size // чтобы единица была на расстоянии в размер объекта\n\n    power = Math.E ** -(Math.PI / 2 * distanceFixed)\n    return power\n}\n\nwindow.addEventListener('mousemove', e => {\n    mouseX = e.clientX - canvas.offsetLeft\n    mouseY = e.clientY - canvas.offsetTop\n})\n\nwindow.addEventListener('click', () => {\n    mode++\n    if (mode > 2) mode = 0\n})"]}