{"version":3,"sources":["index.js"],"names":["scr","canvas","cubes","faces","nx","ny","canvasW","canvasH","white","alpha","ncube","npoly","faceOver","drag","moved","cosY","sinY","cosX","sinX","cosZ","sinZ","minZ","params","firstCubeSize","cubesCount","xm","ym","cx","cy","cz","cxb","cyb","fps","startX","startY","angleY","angleX","angleZ","bkgColor1","autorotate","destroy","running","fl","zoom","Canvas","id","container","document","getElementById","ctx","getContext","resize","w","h","width","height","Point","parent","xyz","project","xo","yo","zo","cube","prototype","projection","x","y","z","visible","X","Y","Face","index","normalVector","p0","points","p1","p2","p3","normal","innerHTML","faceVisible","distance","distanceToCamera","dx","dy","dz","Math","sqrt","draw","beginPath","moveTo","lineTo","closePath","strokeStyle","stroke","Cube","nz","p","i","push","f","nv","offsetWidth","offsetHeight","o","offsetParent","offsetLeft","offsetTop","reset","size","init","ontouchstart","onmousedown","e","target","preventDefault","setCapture","undefined","clientX","touches","clientY","ontouchmove","onmousemove","abs","onmousewheel","wheelDelta","window","addEventListener","setInterval","onchange","checked","onclick","value","run","fillStyle","fillRect","cos","sin","c","j","d","sort","requestAnimationFrame"],"mappings":"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","file":"3d-cubes.e054b3e0.js","sourceRoot":"..\\..\\3d-cubes","sourcesContent":["// ======== private vars ========\n\nlet params = {\n    firstCubeSize: 5,\n    cubesCount: 10\n}\n\nlet scr\nlet canvas\nlet cubes\nlet faces\nlet nx\nlet ny\nlet canvasW\nlet canvasH\nlet xm = 0\nlet ym = 0\nlet cx = 50\nlet cy = 50\nlet cz = 0\nlet cxb = 0\nlet cyb = 0\nlet white\nlet alpha\nlet fps = 0\nlet ncube\nlet npoly\nlet faceOver\nlet drag\nlet moved\nlet startX = 0\nlet startY = 0\nlet cosY\nlet sinY\nlet cosX\nlet sinX\nlet cosZ\nlet sinZ\nlet minZ\nlet angleY = 0\nlet angleX = 0\nlet angleZ = 0\nlet bkgColor1 = 'rgba(0,0,0,0.1)'\nlet autorotate = false\nlet destroy = false\nlet running = true\n// ---- fov ----\nlet fl = 250\nlet zoom = 0\n\nfunction Canvas(id) {\n    this.container = document.getElementById(id)\n    this.ctx = this.container.getContext('2d')\n    this.resize = function(w, h) {\n        this.container.width = w\n        this.container.height = h\n    }\n}\n\nfunction Point(parent, xyz, project) {\n    this.project = project\n    this.xo = xyz[0]\n    this.yo = xyz[1]\n    this.zo = xyz[2]\n    this.cube = parent\n}\n\nPoint.prototype.projection = function() {\n    // ---- 3D rotation ----\n    let x = cosY * (sinZ * this.yo + cosZ * this.xo) - sinY * this.zo\n    let y = sinX * (cosY * this.zo + sinY * (sinZ * this.yo + cosZ * this.xo)) + cosX * (cosZ * this.yo - sinZ * this.xo)\n    let z = cosX * (cosY * this.zo + sinY * (sinZ * this.yo + cosZ * this.xo)) - sinX * (cosZ * this.yo - sinZ * this.xo)\n    this.x = x\n    this.y = y\n    this.z = z\n    if (this.project) {\n        // ---- point visible ----\n        if (z < minZ) minZ = z\n        this.visible = (zoom + z > 0)\n        // ---- 3D to 2D projection ----\n        this.X = (canvasW * 0.5) + x * (fl / (z + zoom))\n        this.Y = (canvasH * 0.5) + y * (fl / (z + zoom))\n    }\n}\n\n// ======= polygon constructor ========\nlet Face = function(cube, index, normalVector) {\n    // ---- parent cube ----\n    this.cube = cube\n    // ---- coordinates ----\n    this.p0 = cube.points[index[0]]\n    this.p1 = cube.points[index[1]]\n    this.p2 = cube.points[index[2]]\n    this.p3 = cube.points[index[3]]\n    // ---- normal vector ----\n    this.normal = new Point(this, normalVector, false)\n    // ---- # faces ----\n    npoly++\n    document.getElementById('npoly').innerHTML = npoly\n}\n\nFace.prototype = {\n    faceVisible: function() {\n        // ---- points visible ----\n        if (this.p0.visible && this.p1.visible && this.p2.visible && this.p3.visible) {\n            // ---- back face culling ----\n            if ((this.p1.Y - this.p0.Y) / (this.p1.X - this.p0.X) < (this.p2.Y - this.p0.Y) / (this.p2.X - this.p0.X) ^ this.p0.X < this.p1.X == this.p0.X > this.p2.X) {\n                // ---- face visible ----\n                this.visible = true\n                return true\n            }\n        }\n        // ---- face hidden ----\n        this.visible = false\n        this.distance = -99999\n        return false\n    },\n\n    distanceToCamera: function() {\n        // ---- distance to camera ----\n        let dx = (this.p0.x + this.p1.x + this.p2.x + this.p3.x) * 0.25\n        let dy = (this.p0.y + this.p1.y + this.p2.y + this.p3.y) * 0.25\n        let dz = (zoom + fl) + (this.p0.z + this.p1.z + this.p2.z + this.p3.z) * 0.25\n        this.distance = Math.sqrt(dx * dx + dy * dy + dz * dz)\n    },\n\n    draw: function() {\n        let r\n        let g\n        let b\n        // ---- shape face ----\n        canvas.ctx.beginPath()\n        canvas.ctx.moveTo(this.p0.X, this.p0.Y)\n        canvas.ctx.lineTo(this.p1.X, this.p1.Y)\n        canvas.ctx.lineTo(this.p2.X, this.p2.Y)\n        canvas.ctx.lineTo(this.p3.X, this.p3.Y)\n        canvas.ctx.closePath()\n\n        // ---- flat (lambert) shading ----\n        this.normal.projection()\n        let light = (\n            white ?\n                this.normal.y + this.normal.z * 0.5 :\n                this.normal.z\n        ) * 256\n        r = g = b = light\n\n        // ---- fill ----\n        // canvas.ctx.fillStyle = 'rgba(' +\n        //     Math.round(r) + ',' +\n        //     Math.round(g) + ',' +\n        //     Math.round(b) + ',' + this.cube.alpha + ')'\n        // canvas.ctx.fill()\n        canvas.ctx.strokeStyle = 'rgba(255,255,255,1)'\n        canvas.ctx.stroke()\n    }\n}\n\n// ======== Cube constructor ========\nlet Cube = function(nx, ny, nz, x, y, z, w) {\n    this.w = w\n    this.points = []\n    let p = [\n        [x - w, y - w, z - w],\n        [x + w, y - w, z - w],\n        [x + w, y + w, z - w],\n        [x - w, y + w, z - w],\n        [x - w, y - w, z + w],\n        [x + w, y - w, z + w],\n        [x + w, y + w, z + w],\n        [x - w, y + w, z + w]\n    ]\n    for (let i in p) this.points.push(\n        new Point(this, p[i], true)\n    )\n\n    // ---- faces coordinates ----\n    let f = [\n        [0, 1, 2, 3],\n        [0, 4, 5, 1],\n        [3, 2, 6, 7],\n        [0, 3, 7, 4],\n        [1, 5, 6, 2],\n        [5, 4, 7, 6]\n    ]\n    // ---- faces normals ----\n    let nv = [\n        [0, 0, 1],\n        [0, 1, 0],\n        [0, -1, 0],\n        [1, 0, 0],\n        [-1, 0, 0],\n        [0, 0, -1]\n    ]\n    // ---- cube transparency ----\n    this.alpha = alpha ? 0.5 : 1\n    // ---- push faces ----\n    for (let i in f) {\n        faces.push(\n            new Face(this, f[i], nv[i])\n        )\n    }\n    ncube++\n}\n\n\nlet resize = function() {\n    // ---- screen resize ----\n    canvasW = scr.offsetWidth\n    canvasH = scr.offsetHeight\n    let o = scr\n    for (nx = 0, ny = 0; o != null; o = o.offsetParent) {\n        nx += o.offsetLeft\n        ny += o.offsetTop\n    }\n    canvas.resize(canvasW, canvasH)\n}\n\nlet reset = function() {\n    // ---- create first cube ----\n    cubes = []\n    faces = []\n    ncube = 0\n    npoly = 0\n\n    let size = params.firstCubeSize\n    for (let i = 0; i < params.cubesCount; i++) {\n        cubes.push(new Cube(0, 0, 0, 0, 0, 0, size))\n        size *= 1.618\n    }\n}\n\nlet init = function() {\n    scr = document.getElementById('screen')\n    canvas = new Canvas('canvas')\n\n    // ======== unified touch/mouse events handler ========\n    scr.ontouchstart = scr.onmousedown = function(e) {\n        if (!running) return true\n        // ---- touchstart ----\n        if (e.target !== canvas.container) return\n        e.preventDefault() // prevents scrolling\n        if (scr.setCapture) scr.setCapture()\n        moved = false\n        drag = true\n        startX = (e.clientX !== undefined ? e.clientX : e.touches[0].clientX) - nx\n        startY = (e.clientY !== undefined ? e.clientY : e.touches[0].clientY) - ny\n    }\n\n    scr.ontouchmove = scr.onmousemove = function(e) {\n        if (!running) return true\n        // ---- touchmove ----\n        e.preventDefault()\n        xm = (e.clientX !== undefined ? e.clientX : e.touches[0].clientX) - nx\n        ym = (e.clientY !== undefined ? e.clientY : e.touches[0].clientY) - ny\n        // detectFaceOver()\n        if (drag) {\n            cx = cxb + (xm - startX)\n            cy = cyb - (ym - startY)\n        }\n        if (Math.abs(xm - startX) > 10 || Math.abs(ym - startY) > 10) {\n            // ---- if pointer moves then cancel the tap/click ----\n            moved = true\n        }\n    }\n\n\n    // ---- Z axis rotation (mouse wheel) ----\n    // scr.addEventListener('DOMMouseScroll', function(e) {\n    //     if (!running) return true\n    //     cz += e.detail * 12\n    //     return false\n    // }, false)\n\n    scr.onmousewheel = function(e) {\n        if (!running) return true\n        cz += e.wheelDelta / 5\n        return false\n    }\n\n    resize()\n    window.addEventListener('resize', resize, false)\n\n    // ---- fps count ----\n    setInterval(function() {\n        document.getElementById('fps').innerHTML = fps * 2\n        fps = 0\n    }, 500) // update every 1/2 seconds\n\n    document.getElementById('alpha').onchange = function() {\n        alpha = this.checked\n    }\n\n    document.getElementById('autor').onchange = function() {\n        autorotate = this.checked\n    }\n\n    document.getElementById('destroy').onchange = function() {\n        destroy = this.checked\n    }\n\n    document.getElementById('stopgo').onclick = function() {\n        running = !running\n        document.getElementById('stopgo').value = running ? 'STOP' : 'GO!'\n        if (running) run()\n    }\n\n    document.getElementById('reset').onclick = function() {\n        reset()\n    }\n    // ---- engine start ----\n    reset()\n    run()\n}\n\n////////////////////////////////////////////////////////////////////////////\n// ======== main loop ========\nlet run = function() {\n    // ---- screen background ----\n    canvas.ctx.fillStyle = bkgColor1\n    canvas.ctx.fillRect(0, 0, canvasW, canvasH)\n\n    // ---- easing rotations ----\n    angleX += ((cy - angleX) * 0.05)\n    angleY += ((cx - angleY) * 0.05)\n    angleZ += ((cz - angleZ) * 0.05)\n    if (autorotate) cz += 1\n    // ---- pre-calculating trigo ----\n    cosY = Math.cos(angleY * 0.01)\n    sinY = Math.sin(angleY * 0.01)\n    cosX = Math.cos(angleX * 0.01)\n    sinX = Math.sin(angleX * 0.01)\n    cosZ = Math.cos(angleZ * 0.01)\n    sinZ = Math.sin(angleZ * 0.01)\n    // ---- points projection ----\n    minZ = 0\n    let i = 0, c\n    while (c = cubes[i++]) {\n        let j = 0, p\n        while (p = c.points[j++]) {\n            p.projection()\n        }\n    }\n    // ---- adapt zoom ----\n    let d = -minZ + 100 - zoom\n    zoom += (d * ((d > 0) ? 0.05 : 0.01))\n    // ---- faces light ----\n    let j = 0, f\n    while (f = faces[j++]) {\n        if (f.faceVisible()) {\n            f.distanceToCamera()\n        }\n    }\n    // ---- faces depth sorting ----\n    faces.sort(function(p0, p1) {\n        return p1.distance - p0.distance\n    })\n    // ---- painting faces ----\n    j = 0\n    while (f = faces[j++]) {\n        if (f.visible) {\n            f.draw()\n        } else break\n    }\n\n    fps++\n    if (running) requestAnimationFrame(run)\n}\n\ninit()"]}